<h1> Utilizado para fazer títulos </h1>

<h2> Para fazer subtítulos </h2>
<h3> Para fazer sub subtítulos </h3>
<h4> Subtítulo do h3 </h4>
<h5> Subtítulo do h4 </0h5>
<h6> Subtítulo do h5 </h6>


<p> Para fazer parágrafos </p>
<i> itálico </i>
<b> negrito </b>
<mark> marcado </mark>
<ins> sublinhado </ins>
<del> riscado </del>
	<p> Este parágrafo tem palavras em <i> itálico </i> e <b> negrito </b> </p>
	<p> Este parágrafo tem palavras <mark> marcadas </mark>, <ins> sublinhadas </ins> e <del> riscadas </del> </p>

<strong> é usado para palavras importantes, e <b> menos importantes, strong é pra DESTACAR mesmo
o mesmo serve para <em> e <i>. 

<strong> e <em> -> Forte e importante.
<b> e <i> -> Fraco e menos importante.

LISTA NÃO ORDENADA (pontos)
<ul> 
	<li> ... </li>
	<li> ... </li>
</ul>

LISTA ORDENADA (1,2,3)
<ol>
	<li> ... </li>
	<li>...</li>
</ol>

LINK 
<p> Clique no link para ir para o youtube: <a href="https://www.youtube.com/watch?v=QdBZY2fkU-0 " target="_blank"> Isto é um hyperlink </a> </p> 
target_blank faz com que o vídeo abra em outra aba

<tag atributo = "valor"> hyperlink aqui </tag>

<a href = "pagina2.html"> - abre outra pagina num arquivo html salvo no mesmo local que o atual.

QUEBRAS DE LINHA

<br> Quebra de linha normal
<hr> Quebra de linha com uma marcação de linha  

<!-- Comentando Códigos !-->

<!doctype html> -- deve estar na linha 1, no topo do código e sem espaços.
<meta charset = "utf-8"> -- indica para o browser os caracteres a serem utilizados.
<html lang ="pt-br">
	<head> 
		<title> título da página </title>
		<meta tags> - palavras-chave
		<link para arquivos externos> - arquivo de javascript, css. 
	</head>
	<body>
		<h1> título da página <h1>
		<p> texto </p>
		<ul> 
			<li> item de lista </li>
		</ul>
		<!-- conteúdo da página --!>
	</body>
</html>

<a> - Serve para colocar um conteúdo clicável, um hyperlink.
	href - o link.
	title - informa ao browser o título da URL.
<link> - Serve para ser o vínculo de um arquivo com outro arquivo.
	href - faz referência para o arquivo externo.
	rel - ele afirma qual o tipo de arquivo que irá fazer a referência.
<img>  - Serve para incluir imagem na página.
	src - a fonte da imagem.
	alt - texto alternativo caso a imagem não carregue.
<script> - Serve para incluir um arquivo de Javascript.
	src - source.


Pseudo-classes:
a:link{
	Estado normal de um link, sem mouse em cima, sem ter visitado antes, sem estar sendo clicado.
}
a:visited{
	Uma página já visitada anteriormente, pode ter uma formatação diferente.
}
a:hover {
	Quando passa o mouse na area clicável.
}

a:active{
	Quando pressiona o botão do mouse em cima do link.

}

Imagens:
Em HTML 
	<img src="..." alt ="...">
		src = a origem da imagem, que seria um diretório do computador.
		alt = texto alternativo caso a imagem não carregue.
		melhor incluir um alt vazio do que não incluir nenhum alt.

Em CSS 
	background-image: url(...); 
		não pode haver espaço entre o "url()" 

Tipos de Imagem 
	Bitmap - formada por pixels, usada quando a foto tem muitas cores.
	Vetor - formada por calculos matematicos, mais leve que a Bitmap. Não perde resolução.

	.jpg/.jpeg - imagem em bitmap. Não há transparência, pois os pixels devem ser coloridos
	.png - tamanho menor, serve pra fotografias. Tem transparência
	.gif - imagem leve, melhor utilizado quando há poucas cores. Não consegue ficar 100% transparênte.
	.svg - formato vetorial, ideal para logotipos com poucas cores, ou arquivos de texto. O usuário poderá dar zoom, não precisa se preocupar com resolução.
	.webp e .avif - melhores que jpg e png, são de Bitmap e conseguem comprimir muito mais os arquivos. Porém não são muito suportados pelos browsers atuais, principalmente o .avif. 
 

Float
	Faz com que a imagem fique à esquerda, centro ou direita, e faz com que o texto se alinhe de acordo com a imagem.
	float:left;
	float:right;

Line-height
	Altera a altura da linha entre uma e outra.
	line-height: 1.5;

Background-repeat
	background-repeat: repeat; é o padrão.
	background-repeat: repeat-x; repete apenas na horizontal.
	background-repeat: repeat-y; repete apenas na vertical.

Background-size
	tamanho da foto de background
	background-size: 350px 600px; altura e largura
	background-size: 100%;
	background-size: contain; ela sempre vai mostrar toda a imagem mesmo se ela se duplicar. Dá preferência ao conteúdo da imagem
	background-size: cover; ela ocupa a área disponível, mesmo se esconder a imagem.


Background-attachment
	configura como a imagem se comporta ao scrollar pela página
	background-attachment:scroll; é o padrão.
	background-attachment:fixed; fixa, ela não scrolla e fica parada.

Background-position
	background-position: bottom; a imagem gruda na parte de baixo
	background-position: right bottom;

Diferença entre background e background-img
	background - vc pode ter um atalho para outras propriedades, como mudar a cor, por exemplo.
        background: url(imagens/tile-pattern.png) grey no-repeat fixed;
	Se tiver outra background também embaixo, a de baixo prevalece.
	Mesma coisa com o margin.


CSS:
border-radius: 6px; /* Arredondar, curvar a borda*/
letter-spacing: 1px; /* Espaçamento entre as letras */
background-color: rgba(0, 0, 0, .3); /* o último mexe na transparência, de 0 a 1*/
display:inline-block; /* Cria a caixa */
min-width: 600px; /* Minima quantidade de width */ 
max-width: 850px; /* Máxima quantidade de width */ 
width: fit-content; /* Encaixa todo o conteúdo no tamanho da caixa, em apenas uma linha*/
width: max-content; /* Pega o tamanho da menor palavra e transforma ela na maior largura possível*/
width: min-content; /* Pega o tamanho da maior palavra e transforma ela na menor largura  possível*/
text-transform: uppercase; -> deixa o texto em maiusculo.
<span> -> usa quando você deseja aplicar estilos ou scripts a uma parte específica de um texto, sem afetar o conteúdo ou a estrutura do documento.  
pointer-events:none --> se vc quer ou não que o elemento seja clicável. Vai ignorar o hover e o fato de que o elemento em si é um link. 
cursor:default; --> altera o cursor. Neste caso, ele irá continuar sendo clicável mas não vai mudar para o "dedo pra cima" quando põe em cima de um link.
flex:1 --> aloca todo o espaço disponível para esse item dentro do contêiner flexível.

  
HTML:
p{Lorem ipsum dolor!}*10 -> Pega o mesmo texto e cola 10x
div#div1 -> acelera o processo e cria um <div id="div1"></div>




overflow -> serve para tratar o conteúdo que excede o elemento, que sai da caixa e vai embora.
	overflow: hidden; /* Todo o conteúdo que excede fica escondido */
	overflow: scroll; /* Esconde o conteúdo, mas habilita um scroll que permite ler o texto que excede, funciona tanto na horizontal quanto na vertical */
	overflow: auto; /* Faz a mesma coisa do scroll, mas só põe a barra de rolagem onde é necessário, e se for necessário.*/
	overflow-x e overflow-y: auto,scroll,hidden; /* Para mexer individualmente com os scrolls horizontais e verticais. */
	
	
Position -> serve para posicionar os elementos na tela
	static: padrão
	relative: se desloca de acordo com sua posição original
	absolute: sai do fluxo natural do documento e se alinha de acordo com o container mais proximo  q nao seja static.
	fixed: sempre se relaciona com a janela do browser, e sai do fluxo natural do documento.
	sticky:  híbrido do relative e do fixed.
		funcionam com  top, bottom, left e right.
	
	z-index-> para controlar quem fica na frente ou atrás.
	
Flexbox
	display:flex
	
	flex-wrap: wrap; -> Se nao tiver espaço na direita, ele quebra a linha.
	flex-wrap: nowrap; -> nao quebra a linha.
	
	flex-direction: column; -> transforma em coluna.
	flex-direction: column-reverse; -> coluna em reverse.
	flex-direction: row; -> em linha.
	flex-direction: row-reverse; -> linha em reverse.
	
	flex-flow: row wrap; -> serve para juntar os dois comandos acima.
	
	justify-content: flex-end; -> ele põe o conteudo no final.
	justify-content: center; -> ele põe o conteudo no meio.
	justify-content: space-around; -> ele pega o espaço que sobre e divide entre os flex items
	justify-content: space-between; -> ele pega o espaço que sobra e divide no meio. Ele nao deixa espaço algum no primeiro nem no último.
	justify-content: space-evenly; -> deixa sempre o mesmo espaço, de forma mais exata. 
	
	align-items: center,flex-end,flex-start...;
	align-items: baseline; -> alinha todos os elementos junto com o maior elemento da div.
	
	align-content: center,flex-end,flex-start...;
	
	justify-content geralmente alinha os itens na horizontal, e o align-content geralmente alinha os itens na vertical, mas nem sempre isso é verdade.
	
	
	
	
Especificidade
	.header__nav a{ --> 1
    color: white;
    text-decoration: none;
    padding: 14px;
    border-radius: 6px;
	}

	.header__nav--active{ --> 2
		background-color: #cbe300;
		color: #0c1014;
	}
	
	  Na especificidade, ganha quem é mais específico. Por exemplo, quem ganha nesta, é o item 1, pois ele é mais específico que o 2. O 1 possui apelido e elemento, 
	  enquanto o 2 possui apenas apelido.
	  Para contornar este problema, vc pode fazer com que os 2 elementos tenham uma classe e uma tag, assim, ganha quem estiver por último no documento.
	  ou então especifica transformando o .header__nav--active em ----> a.header__nav active{
	
	.header__nav a --> com o espaço, seleciona a tag "a" que está contido no elemento que tem a classe header__nav
	a.header__nav--active --> sem o espaço, seleciona a tag  "a" que contém a classe header__nav--active
	
Avançando em CSS

	mudar o font size no html para 62.5%, assim,  1 em = 10px
		html{
			font-size: 62.5%
		}
	1 em --> 16px
	a unidade de elemento EM é sempre relativa em relação ao elemento pai.
			p{
            font-size: 2em; /*1.6 em = 16px*/
			}
				Neste caso, como p = 2em, cada 1 EM do b{ equivale a 20
			b{
				font-size: 1em;
				color: red;
			}
	rem --> pega o valor do root, ou seja, do html. 
		neste caso, é 10px (62,5%),
	
	font-size: 100% --> 1em
	As porcentagens sempre estarão relacionadas à largura do elemento pai
	Quando aumenta o font-size, o padding aumenta de acordo.
	Os paddings estão ligados com o tamanho da fonte.
	
	Viewport --> é a tela visível do aparelho em que o site está aberto
		vh --> viewport height - se vc pôr height:75vh, ele ocupará 75% da altura da tela.
		vw --> viewport width - se vc pôr width:75vw, ele ocupará 75% da largura da tela.
	
	Unidade ch --> define a quantidade de caracteres que vai ter por linha ou coluna.
		width:20ch ->
			Lorem ipsum dolor, sit
			magni nisi harum. Quos 
			
	Função calc --> soma unidade de medidas diferentes. Deve ter espaço antes e depois dos símbolos de + e -.
		min-height: calc(500px + 70px);
		min-height: calc(100vh - 15rem - 2rem);
	
	Para criar variáveis, coloca-se 2 "--" seguido do nome, dois pontos e um argumento:
		É boa prática de programação colocar no ::root ao invés do }html pois fica mais organizado.
			::root{
			--header-height:15rem;
			--main-color: royalblue;
			}
			
			mais abaixo no código:
			header{
				height: var(--header-height);
				background-color: var(--main-color);
			}
			main{
			min-height: calc(100vh - var(--header-height) - 2rem);
			margin-top: var(--header-height);
			background-color: var(--main-color);
			}
		Sempre que precisar usar algo que se relaciona com a altura do header, é só chamar a variável.
		
		Também é possível mudar a variável de acordo com o escopo que você está
			p1{
				--main-color: yellow;
				color:var(--main-color); --> agora a --main-color não é mais azul, é amarelo.
			}
			p2{
				color:var(--main-color); --> continua azul
			}
			


